"""
Instructions


Write a generic function chainer that takes a starting value, and an array of functions to execute on it (array of symbols for Ruby).

The input for each function is the output of the previous function (except the first function, which takes the starting value as its input). Return the final value after execution is complete.

def add10(x): return x + 10
def mul30(x): return x * 30

chain(50, [add10, mul30])
# returns 1800
"""

"""
Sample Tests


import codewars_test as test
from solution import chain


def add10(x): return x + 10
def mul30(x): return x * 30


@test.describe("Test")
def test_group():
    @test.it("Sample tests")
    def test_case():
        test.assert_equals(chain(42, []), 42)
        test.assert_equals(chain(50, [mul30]), 1500)
        test.assert_equals(chain(50, [mul30, add10]), 1510)
        test.assert_equals(chain(50, [add10, mul30]), 1800)
"""


# Solution

def chain(value, functions):
    for f in functions:
        value = f(value)
    return value
